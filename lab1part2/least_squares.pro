PRO fit_it, y0, fitted
;+
; OVERVIEW
; --------
;     this procedure will take a linear least squares fit of data that
;     is used in week 2 of our second lab
;
; CALLING SEQUENCE
; ----------------
;     fit_it, y0, fitted
;
; PARAMETERS
; ----------
; y0: list
;     this should hold the measured values to be fit against a
;     number of "model parameters" or unknowns. Since this is
;     specifically tailored for this lab, the x-values to be used in
;     conjunction with this list are automatically generated by assuming
;     that they are the "null points" specified in the lab
;
; OUTPUTS
; -------
; fitArr: structure
;     the keys to fitArr will be yBar, delY, sTd, diagXXI, and
;     varDC. E.G. to get yBar, use myVariable = fitted.yBar
;     yBar: the predicted values of our measurements
;     delY: the uncertainty in our measurements
;     sTd: the standard deviation of our measurements
;     diagXXI: the uncertainty in the prediction values
;     varDC: the variances in the derived coefficients
;-
  
  numY = n_elements(y0)              ; get the number of elements in the measured values
  x0Partial = findgen(numY)          ; set the null number for the x matrix
  x0 = make_it(x0Partial)            ; get the full x-matrix, with the zeroth order term set to 1
 
  N = (size(x0))[2]                  ; get nuber of rows, i.e. unknowns
  M = (size(x0))[1]                  ; get number of columns, i.e. data points

  y0 = transpose(y0)                 ; turn y vector into a column vector for matrix ops
  
  XX = transpose(x0) ## x0           ; get alpha from the handout, xT * x
  XY = transpose(x0) ## y0           ; get beta from the handout, xT * y
  XXI = invert(XX)                   ; invert xT from the handout, xT^(-1)
  A = XXI ## XY                      ; least squares fit coefficients that we want

  yBar = x0 ## A                     ; predicted values, the function!

  delY = y0 - yBar                   ; uncertainties
  
  sTd = total(delY^2)/(M-N)          ; square of standard deviation

  diagXXI = XXI[(N+1) * indgen(N)]   ; get error in yBar

  varDC = sTd * diagXXI              ; variances of derived coefficients
  
  fitted = {yBar:yBar, delY:delY, sTd:sTd, diagXXI:diagXXI, varDC:varDC} ; struct'ing
END

FUNCTION make_it, n0
;+
; OVERVIEW
; --------
; will make a column of 1's accompany any array that passes
; in. use is specific to week 2 of lab 2
;
; CALLING SEQUENCE
; ----------------
; make_it(n0)
;
; PARAMETERS
; ----------
; n0: list
;     the array of unknowns, in this case null points
;
; OUTPUTS
; -------
; n0Arr: list
;     the array of unknowns with the column of 1's appended. is
;     of shape (2, data points)
;-

  numN = n_elements(n0)                     ; determine how many rows we need
  n0Arr = make_array(2, numN, VALUE=1.)     ; initialize array of appropriate size
  FOR i= 0, numN - 1 DO BEGIN               ; loop through every number in n0
     n0Arr[1,i] = n0[i]                     ; define elements of the array
  ENDFOR
  
  RETURN, n0Arr                             ; yippee!

END
